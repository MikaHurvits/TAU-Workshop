# -*- coding: utf-8 -*-
"""FineTuningPractice1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ju7jTKYprHMJppYDomvCG_hq0KUoYmz
"""


import numpy as np
import pandas as pd
from transformers import AutoTokenizer, AutoModelForSequenceClassification

from datasets import load_dataset

dataset = load_dataset("yelp_review_full")

good = [dataset["train"][i] for i in range(1000) if dataset["train"][i]["label"] == 4]
good[0]

# model_name = 'valurank/finetuned-distilbert-multi-label-emotion'
# model = AutoModelForSequenceClassification.from_pretrained(model_name)
# tokenizer = AutoTokenizer.from_pretrained(model_name)

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", num_labels=5)

def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

small_train_dataset = tokenized_datasets["train"].shuffle(seed=42).select(range(1000))
small_eval_dataset = tokenized_datasets["test"].shuffle(seed=42).select(range(1000))

from transformers import AutoModelForSequenceClassification

from transformers import TrainingArguments

training_args = TrainingArguments(output_dir="test_trainer")

import evaluate

metric = evaluate.load("accuracy")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return metric.compute(predictions=predictions, references=labels)

from transformers import TrainingArguments, Trainer

training_args = TrainingArguments(output_dir="test_trainer", evaluation_strategy="epoch")

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=small_train_dataset,
    eval_dataset=small_eval_dataset,
    compute_metrics=compute_metrics,
)

trainer.train()

eval_predictions = trainer.predict(small_eval_dataset)

predicted_labels = eval_predictions.predictions.argmax(axis=1)
real_labels = eval_predictions.label_ids
correct_labels = [index for index in range(len(real_labels)) if predicted_labels[index] == real_labels[index]]
wrong_labels = [index for index in range(len(real_labels)) if predicted_labels[index] != real_labels[index]]
for index,i in zip(wrong_labels[:5],range(5)):
  print("example", i+1)
  print("Input Text:", small_eval_dataset[index]['text'])
  print("Predicted label:", predicted_labels[index])
  print("real label:", real_labels[index])
for index,i in zip(correct_labels[:5],range(5)):
  print("example", i+1)
  print("Input Text:", small_eval_dataset[index]['text'])
  print("Predicted label:", predicted_labels[index])
  print("real label:", real_labels[index])
